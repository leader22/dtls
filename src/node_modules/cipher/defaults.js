'use strict';

const {
  cipherSuites,
  AEAD_AES_128_GCM,
  AEAD_AES_256_GCM,
  AEAD_AES_128_CCM,
  AEAD_AES_256_CCM,
} = require('lib/constants');
const AEADCipher = require('cipher/aead');
const {
  createRSAKeyExchange,
  createECDHERSAKeyExchange,
  createECDHEECDSAKeyExchange,
  createPSKKeyExchange,
} = require('cipher/key-exchange');

module.exports = defaultCiphers;

const RSA_KEY_EXCHANGE = createRSAKeyExchange();
const ECDHE_RSA_KEY_EXCHANGE = createECDHERSAKeyExchange();
const ECDHE_ECDSA_KEY_EXCHANGE = createECDHEECDSAKeyExchange();
const PSK_KEY_EXCHANGE = createPSKKeyExchange();

/**
 * Get the list of default cipher suites.
 * @returns {AEADCipher[]}
 */
function defaultCiphers() {
  return [
    createAEADCipher(
      cipherSuites.TLS_RSA_WITH_AES_128_GCM_SHA256,
      'TLS_RSA_WITH_AES_128_GCM_SHA256',
      'aes-128-gcm',
      RSA_KEY_EXCHANGE,
      AEAD_AES_128_GCM
    ),

    createAEADCipher(
      cipherSuites.TLS_RSA_WITH_AES_256_GCM_SHA384,
      'TLS_RSA_WITH_AES_256_GCM_SHA384',
      'aes-256-gcm',
      RSA_KEY_EXCHANGE,
      AEAD_AES_256_GCM,
      'sha384'
    ),

    createAEADCipher(
      cipherSuites.TLS_RSA_WITH_AES_128_CCM,
      'TLS_RSA_WITH_AES_128_CCM',
      'aes-128-ccm',
      RSA_KEY_EXCHANGE,
      AEAD_AES_128_CCM
    ),

    createAEADCipher(
      cipherSuites.TLS_RSA_WITH_AES_256_CCM,
      'TLS_RSA_WITH_AES_256_CCM',
      'aes-256-ccm',
      RSA_KEY_EXCHANGE,
      AEAD_AES_256_CCM
    ),

    createAEADCipher(
      cipherSuites.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,
      'TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256',
      'aes-128-gcm',
      ECDHE_RSA_KEY_EXCHANGE,
      AEAD_AES_128_GCM
    ),

    createAEADCipher(
      cipherSuites.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,
      'TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384',
      'aes-256-gcm',
      ECDHE_RSA_KEY_EXCHANGE,
      AEAD_AES_256_GCM,
      'sha384'
    ),

    createAEADCipher(
      cipherSuites.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,
      'TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256',
      'aes-128-gcm',
      ECDHE_ECDSA_KEY_EXCHANGE,
      AEAD_AES_128_GCM
    ),

    createAEADCipher(
      cipherSuites.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,
      'TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384',
      'aes-256-gcm',
      ECDHE_ECDSA_KEY_EXCHANGE,
      AEAD_AES_256_GCM,
      'sha384'
    ),

    createAEADCipher(
      cipherSuites.TLS_ECDHE_ECDSA_WITH_AES_128_CCM,
      'TLS_ECDHE_ECDSA_WITH_AES_128_CCM',
      'aes-128-ccm',
      ECDHE_ECDSA_KEY_EXCHANGE,
      AEAD_AES_128_CCM
    ),

    createAEADCipher(
      cipherSuites.TLS_ECDHE_ECDSA_WITH_AES_256_CCM,
      'TLS_ECDHE_ECDSA_WITH_AES_256_CCM',
      'aes-256-ccm',
      ECDHE_ECDSA_KEY_EXCHANGE,
      AEAD_AES_256_CCM
    ),

    createAEADCipher(
      cipherSuites.TLS_PSK_WITH_AES_128_GCM_SHA256,
      'TLS_PSK_WITH_AES_128_GCM_SHA256',
      'aes-128-gcm',
      PSK_KEY_EXCHANGE,
      AEAD_AES_128_GCM,
      'sha256'
    ),

    createAEADCipher(
      cipherSuites.TLS_PSK_WITH_AES_256_GCM_SHA384,
      'TLS_PSK_WITH_AES_256_GCM_SHA384',
      'aes-256-gcm',
      PSK_KEY_EXCHANGE,
      AEAD_AES_256_GCM,
      'sha384'
    ),
  ];
}

/**
 * @param {number} id An internal id of cipher suite.
 * @param {string} name A valid cipher suite name.
 * @param {string} block A valid nodejs cipher name.
 * @param {KeyExchange} kx Key exchange type.
 * @param {Object} constants Cipher specific constants.
 * @param {string} hash
 * @returns {AEADCipher}
 */
function createAEADCipher(id, name, block, kx, constants, hash = 'sha256') {
  const cipher = new AEADCipher();

  cipher.id = id;
  cipher.name = name;
  cipher.blockAlgorithm = block;
  cipher.kx = kx;
  cipher.hash = hash;

  cipher.keyLength = constants.K_LEN;
  cipher.nonceLength = constants.N_MAX;

  // RFC5288, sec. 3
  cipher.nonceImplicitLength = 4;
  cipher.nonceExplicitLength = 8;

  cipher.ivLength = cipher.nonceImplicitLength;

  cipher.authTagLength = 16;

  return cipher;
}
